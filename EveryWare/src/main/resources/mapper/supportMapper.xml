<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 업무지원관련 SQL -->
<mapper namespace="com.a7.everyware.support.dao.SupportMapper">

	<!-- 출근 체크 -->
	<insert id="attendCheck" parameterType="AttendVO">
		insert into attend_tb (
			attend_id
			, user_id
			, attend_check
		
		)
		values (
			attend_id_seq.nextval
			, #{user_id}
			, #{attend_check}
		)
		
	</insert>
	
	<!-- 퇴근 체크 -->
	<insert id="attendOut" parameterType="AttendVO">
		insert into attend_tb (
			attend_id
			, user_id
			, attend_check
		
		)
		values (
			attend_id_seq.nextval
			, #{user_id}
			, #{attend_check}
		)
		
	</insert>
	
	<!-- 외출 체크 -->
	<insert id="goOut" parameterType="AttendVO">
		insert into attend_tb (
			attend_id
			, user_id
			, attend_check
		
		)
		values (
			attend_id_seq.nextval
			, #{user_id}
			, #{attend_check}
		)
		
	</insert>
	
	<!-- 외출 복귀 -->
	<insert id="goIn" parameterType="AttendVO">
		insert into attend_tb (
			attend_id
			, user_id
			, attend_check
		
		)
		values (
			attend_id_seq.nextval
			, #{user_id}
			, #{attend_check}
		)
		
	</insert>

	<!-- 근태 읽기 user_id로 ** 근태 현황 출력시 이용-->
	<select id="attendListGet" parameterType="String" resultType="AttendVO">
		            
		select
			a.attend_id 
			, (select
					u.user_id ||  ' / ' || u.user_name || '   /   ' || d.dept_name || '   /   ' || p.position_name
	            from
					user_tb u
					, dept_tb d
					, position_tb p
				where
					u.dept_id = d.dept_id
					and u.position_id = p.position_id
                    and a.user_id = u.user_id
	          ) as user_id
			, a.attend_check 
			, to_char(a.attend_time, 'YY-MM-DD HH24:MI:SS') attend_time
		from
			attend_tb a
		where
			a.user_id = #{user_id}
		order by attend_time desc
		
	
	</select>
	
	
	
	<!-- 업무보고 저장 -->
	<insert id="insertBoard" parameterType="BoardVO">
		insert into board_tb (
			board_id
			, board_title
			, board_content
			, user_id
			, board_attached
			, boardFolder_id
			
		)
		values (
			board_id_seq.nextval
			, #{board_title}
			, #{board_content}
			, #{user_id}
			, #{board_attached}
			, #{boardFolder_id}
			
		)
	</insert>
	
	
	<!-- 업무보고 첨부파일 저장 -->
	<insert id="insertBoardAttached" parameterType="BoardAttachedVO">
		insert into boardAttached_tb (
			bAttached_id
			, board_id
			, bAttached_saved
			, bAttached_original	
		)
		values (
			bAttached_id_seq.nextval
			, #{board_id}
			, #{bAttached_saved}
			, #{bAttached_original}
			
		)
	</insert>
	
	
	
	<!-- boardID가져오기(첨부시) -->
	<select id="findBoardId" parameterType="BoardVO" resultType="BoardVO">
		select
			*
		from
			board_tb
		where
			board_title = #{board_title}
			and board_content = #{board_content}
			and user_id = #{user_id}
			and board_attached = #{board_attached}
			and boardFolder_id = #{boardFolder_id}
	</select>
	
	
	<!-- 게시글 읽기  -->
	<select id="get" parameterType="int" resultType="BoardVO">
		select 
			board_id
			, user_id
			, board_title
			, board_content
			, to_char(board_date, 'YYYY-MM-DD HH24:MI:SS') board_date
			, board_hits
			, boardFolder_id
			, board_attached
		from 
			board_tb 
		where 
			board_id = #{board_id}
		
	</select>
	
	
	<!-- 첨부 게시글 읽기  -->
	<select id="searchBoardAttached" parameterType="int" resultType="BoardAttachedVO">
		select 
			*
		from 
			boardAttached_tb 
		where 
			bAttached_id = #{bAttached_id}
	</select>
	
	
	
	<!-- BoardAttached 가져오기  boardid로-->
	<select id="getBoardAttached" parameterType="int" resultType="BoardAttachedVO">
	select * from boardattached_tb where board_id = #{board_id}
	</select>
	
	
	<!-- 조회수 1 증가 -->
	<update id="addHits" parameterType="int">
		update
			board_tb
		set
			board_hits = board_hits + 1
		where
			board_id = #{board_id}
	</update>
	
	
	<!-- 전체 글 개수 (검색 필터링 후) -->
	<select id="getTotal" resultType="int">
		select 
			count(*)
		from 
			board_tb 
		where 
		<if test="_parameter != null">
			board_title like '%' || #{searchText} || '%'
			and
		</if>
			boardFolder_id = #{boardFolder_id}
	</select>
	
	
	<!-- 현재 페이지 목록 (검색 필터링 후) -->
	<select id="listBoard" parameterType="string" resultType="BoardVO">
		select 
			board_id
			, user_id
			, board_title
			, to_char(board_date, 'YYYY-MM-DD') board_date
			, board_hits
		from 
			board_tb
	
		where 
			<if test="_parameter != null">
			board_title like '%' || #{searchText} || '%'
			and </if>
			boardFolder_id = #{boardFolder_id}
	
		order by board_id desc
	</select>
	
	
	<!-- 글 삭제 -->
	<delete id="deleteBoard" parameterType="BoardVO">
		delete
		from
			board_tb
		where
			board_id = #{board_id}
			and user_id = #{user_id}
			
	</delete>
	
	
	<!-- 첨부삭제 -->
	<delete id="deleteBoardAttached" parameterType="BoardAttachedVO">
	delete
	from
		boardAttached_tb
	where
		board_id = #{board_id}
		and bAttached_id = #{bAttached_id}
		
	
	</delete>


	<!-- 글 수정 -->
	<update id="modifyBoard" parameterType="BoardVO">
		update
			board_tb
		set
			board_title = #{board_title}
			, board_content = #{board_content}
			, board_attached = #{board_attached}
		where
			board_id = #{board_id}
			and user_id = #{user_id}
	</update>
	
	
	<!-- 리플 저장 -->
	<insert id="insertBoardReply" parameterType="BoardReplyVO">
		insert into boardReply_tb (
			bReply_id
			, board_id
			, bReply_content
			, user_id
		)
		values (
			breply_id_seq.nextval
			, #{board_id}
			, #{bReply_content}
			, #{user_id}
		)
	</insert>
	
	
	<!-- 리플 삭제 -->
	<delete id="deleteBoardReply" parameterType="BoardReplyVO">
		delete
		from
			boardReply_tb
		where
			bReply_id = #{bReply_id}
			and user_id = #{user_id}
	</delete>
	
	
	<!-- 현재 글의 리플 목록 -->
	<select id="listBoardReply" parameterType="int" resultType="BoardReplyVO">
		select 
			bReply_id
			, board_id
			, user_id
			, bReply_content
			, to_char(bReply_date, 'YYYY-MM-DD') bReply_date
		from 
			boardReply_tb 
		where
			board_id = #{board_id}
		order by bReply_id desc
	</select>


	<!-- 리플 수정 -->
	<update id="modifyBoardReply" parameterType="BoardReplyVO">
		update
			boardReply_tb
		set
			bReply_content = #{bReply_content}
		where
			bReply_id = #{bReply_id}
			and user_id = #{user_id}
	</update>
	
	
	
	
<!-- 	
	
	근태 목록
	<select id="attendList" resultType="AttendVO">
		select 
			attend_id
			, user_id
			, attend_check
			, to_char(attend_time, 'YY-MM-DD HH24:MI:SS') attend_time
		from
			attend_tb
		
	
	</select>
	 -->
	
	
	<!-- 	
	근태 읽기 attend_id로
	<select id="attendGet" parameterType="int" resultType="AttendVO">
		select
			attend_id 
			, user_id
			, attend_check
			, to_char(attend_time, 'YY-MM-DD HH24:MI:SS') attend_time
		from
			attend_tb
		where
			attend_id = #{attend_id}
	
	</select>
	 -->
</mapper>