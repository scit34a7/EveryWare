<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 게시판 처리 SQL -->
<mapper namespace="com.a7.everyware.board.dao.BoardMapper">

	<!-- 게시글 저장 -->
	<insert id="insertBoard" parameterType="BoardVO">
		insert into board_tb (
			board_id
			, board_title
			, board_content
			, user_id
			, board_attached
			, boardFolder_id
			
		)
		values (
			board_id_seq.nextval
			, #{board_title}
			, #{board_content}
			, #{user_id}
			, #{board_attached}
			, #{boardFolder_id}
			
		)
	</insert>
	
	
	<!-- 게시판 첨부파일 저장 -->
	<insert id="insertBoardAttached" parameterType="BoardAttachedVO">
		insert into boardAttached_tb (
			bAttached_id
			, board_id
			, bAttached_saved
			, bAttached_original	
		)
		values (
			bAttached_id_seq.nextval
			, #{board_id}
			, #{bAttached_saved}
			, #{bAttached_original}
			
		)
	</insert>
	
	
	<!-- boardID가져오기(첨부시) -->
	<select id="findBoardId" parameterType="BoardVO" resultType="BoardVO">
		select
			*
		from
			board_tb
		where
			board_title = #{board_title}
			and board_content = #{board_content}
			and user_id = #{user_id}
			and board_attached = #{board_attached}
			and boardFolder_id = #{boardFolder_id}
	</select>
	

	
	<!-- 게시글 읽기  -->
	<select id="get" parameterType="int" resultType="BoardVO">
		select 
			b.board_id
			, (select
					u.user_name
				from
					user_tb u
				where
					b.user_id = u.user_id
				)as user_id
			, b.board_title
			, b.board_content
			, to_char(b.board_date, 'YYYY-MM-DD HH24:MI:SS') board_date
			, b.board_hits
			, b.boardFolder_id
			, b.board_attached
		from 
			board_tb b
		where 
			b.board_id = #{board_id}
		
	</select>
	
	
	<!-- 첨부 게시글 읽기  -->
	<select id="searchBoardAttached" parameterType="int" resultType="BoardAttachedVO">
		select 
			*
		from 
			boardAttached_tb 
		where 
			bAttached_id = #{bAttached_id}
	</select>
	
	
	<!-- BoardAttached 가져오기  boardid로-->
	<select id="getBoardAttached" parameterType="int" resultType="BoardAttachedVO">
	select * from boardattached_tb where board_id = #{board_id}
	</select>
	
	
	<!-- 조회수 1 증가 -->
	<update id="addHits" parameterType="int">
		update
			board_tb
		set
			board_hits = board_hits + 1
		where
			board_id = #{board_id}
	</update>
	
	
	<!-- 전체 글 개수 (검색 필터링 후) -->
	<select id="getTotal" resultType="int">
		select 
			count(*)
		from 
			board_tb 
		where 
		<if test="_parameter != null">
			board_title like '%' || #{searchText} || '%'
			and
		</if>
			boardFolder_id = #{boardFolder_id}
	</select>
	
<!-- 	
	현재 페이지 목록 (검색 필터링 후: 글목록에서 작성자 사번으로 출력됨)
	<select id="listBoard" parameterType="string" resultType="BoardVO">
		select 
			board_id
			, user_id
			, board_title
			, to_char(board_date, 'YYYY-MM-DD') board_date
			, board_hits
		from 
			board_tb
	
		where 
			<if test="_parameter != null">
			board_title like '%' || #{searchText} || '%'
			and </if>
			boardFolder_id = #{boardFolder_id}
	
		order by board_id desc
	</select>
	
	 -->
	<!-- 현재 페이지 목록 (검색 필터링 후) -->
	<select id="listBoard" parameterType="string" resultType="BoardVO">
		select 
			b.board_id
			, (select 
					u.user_name || '(' || d.dept_name || ')'
				from
					user_tb u
					, dept_tb d
				where
					u.dept_id = d.dept_id
					and b.user_id = u.user_id
				) as user_id
				, b.board_title
				, to_char(b.board_date, 'YYYY-MM-DD') board_date
				, b.board_hits
			
		from 
			board_tb b
	
		where 
			<if test="_parameter != null">
			b.board_title like '%' || #{searchText} || '%'
			and </if>
			b.boardFolder_id = #{boardFolder_id}
	
		order by board_date desc
	</select>
	
	
	
	<!-- 현재 페이지 목록(메인 공지사항 출력용) -->
	<select id="listBoardMain" parameterType="int" resultType="BoardVO">
		select 
			b.board_id
			, (select 
					u.user_name || '(' || d.dept_name || ')'
				from
					user_tb u
					, dept_tb d
				where
					u.dept_id = d.dept_id
					and b.user_id = u.user_id
				) as user_id
				, b.board_title
				, to_char(b.board_date, 'YYYY-MM-DD') board_date
				, b.board_hits
		from 
			board_tb b
	
		where 
			b.boardFolder_id = #{1}
	
		order by board_date desc
	</select>
	
	 
	
	<!-- 글 삭제 -->
	<delete id="deleteBoard" parameterType="BoardVO">
		delete
		from
			board_tb
		where
			board_id = #{board_id}
			and user_id = #{user_id}
			
	</delete>
	
	
	<!-- 첨부삭제 -->
	<delete id="deleteBoardAttached" parameterType="BoardAttachedVO">
	delete
	from
		boardAttached_tb
	where
		board_id = #{board_id}
		and bAttached_id = #{bAttached_id}
		
	
	</delete>


	<!-- 글 수정 -->
	<update id="modifyBoard" parameterType="BoardVO">
		update
			board_tb
		set
			board_title = #{board_title}
			, board_content = #{board_content}
			, board_attached = #{board_attached}
		where
			board_id = #{board_id}
			and user_id = #{user_id}
	</update>
	
	
	<!-- 리플 저장 -->
	<insert id="insertBoardReply" parameterType="BoardReplyVO">
		insert into boardReply_tb (
			bReply_id
			, board_id
			, bReply_content
			, user_id
		)
		values (
			breply_id_seq.nextval
			, #{board_id}
			, #{bReply_content}
			, #{user_id}
		)
	</insert>
	
	
	<!-- 리플 삭제 -->
	<delete id="deleteBoardReply" parameterType="BoardReplyVO">
		delete
		from
			boardReply_tb
		where
			bReply_id = #{bReply_id}
			and user_id = #{user_id}
	</delete>
	
	
	<!-- 현재 글의 리플 목록 -->
	<!-- <select id="listBoardReply" parameterType="int" resultType="BoardReplyVO">
		select 
			bReply_id
			, board_id
			, user_id
			, bReply_content
			, to_char(bReply_date, 'YYYY-MM-DD') bReply_date
		from 
			boardReply_tb 
		where
			board_id = #{board_id}
		order by bReply_id desc
	</select> -->
	
	
	<!-- 현재 글의 리플 목록 -->
	<select id="listBoardReply" parameterType="int" resultType="BoardReplyVO">
		select 
			r.bReply_id
			, r.board_id
			, (select
					u.user_name
				from
					user_tb u
				where
					r.user_id = u.user_id
				)as user_id
			, r.bReply_content
			, to_char(r.bReply_date, 'YYYY-MM-DD') bReply_date
		from 
			boardReply_tb r
		where
			r.board_id = #{board_id}
		order by bReply_id desc
	</select>


	<!-- 리플 수정 -->
	<update id="modifyBoardReply" parameterType="BoardReplyVO">
		update
			boardReply_tb
		set
			bReply_content = #{bReply_content}
		where
			bReply_id = #{bReply_id}
			and user_id = #{user_id}
	</update>
	
</mapper>